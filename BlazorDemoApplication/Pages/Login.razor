@page "/"
@using BlazorDemoApplication.Data
@using Microsoft.AspNetCore.Authentication
@inject UserService authService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService session
@inject ApplicationDbContext applicationDbContext
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@inject UserRegister userReg
@inject Blazored.SessionStorage.ISessionStorageService session

<MudContainer>
    <MudPaper Class="mt-5 p-5">
        <h3>Login</h3>

        <EditForm Model="@model" OnValidSubmit="LoginUser">
            <DataAnnotationsValidator />
            <MudTextField @bind-Value="model.RegEmail" Label="Email" Required="true" />

            <MudTextField @bind-Value="model.RegPassword" Label="Password" InputType="InputType.Password" Required="true">
                <MudInputAdornment Position="AdornmentPosition.End">
                    <MudIconButton Icon="Icons.Outlined.Visibility" @onclick="TogglePasswordVisibility"/>
                </MudInputAdornment>
            </MudTextField>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" ButtonType="ButtonType.Submit" @onclick="LoginUser">Login</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" Type="ButtonType.Submit" @onclick="ClearFields">Cancel</MudButton>

        </EditForm>

        <div class="mt-3">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="text-danger">
                    @errorMessage
                </div>
            }
        </div>

        <div class="mt-3">
            <p>Don't have an account? <a href="/Register">Register here</a>.</p>
        </div>
    </MudPaper>
</MudContainer>

@code {
    private UserRegister model = new UserRegister();
    private string errorMessage;
    private bool showPassword = false;
    private bool success;

    private void ClearFields()
    {
        model = new UserRegister();
        success = false;
    }
    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    protected async Task LoginUser()
    {
        bool success = await authService.Login(model.RegEmail, model.RegPassword);
        if (success)    
        {
            // Set session user upon successful login
            SetSessionUser(model.RegEmail, model.RegPassword);
            NavigationManager.NavigateTo("/Users");
        }
        else
        {
            errorMessage = "Username or password is incorrect.";
        }
    }

    public void SetSessionUser(string email, string password)
    {
        var userReg = new UserRegister
        {
            RegEmail = email,
            RegPassword = password
            // Set other properties as needed
        };

        session.SetItemAsync("SessionUser", userReg);
    }
}
