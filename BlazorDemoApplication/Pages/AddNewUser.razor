@page "/AddNewUser"
@using BlazorDemoApplication.Data
@using System.IO
@using System.Text
@inject UserService userService
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions
@inject UserService UserService
@inject Blazored.SessionStorage.ISessionStorageService session
@using MudBlazor
@using System.ComponentModel.DataAnnotations


<style>
    .mud-icon-root {
    margin-left:1%;
    }

    /* Apply 2D effects to form elements */
    .form-group {
        transform: scale(1);
        transition: transform 0.3s ease;
    }

        /* Increase scale on hover */
        .form-group:hover {
            transform: scale(1.05);
        }
</style>

<h3>Add New User</h3>
<hr />



@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}



<form>
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <MudTextField @bind-Value="obj.FirstName" Label="First Name" Required="true" />

            </div>
            <div class="form-group">
                <MudTextField @bind-Value="obj.LastName" Label="Last Name" Required="true" />

            </div>
            <div class="form-group">
                <MudTextField @bind-Value="obj.Email" Label="Email" Required="true" Validation="@emailValidation" />
            </div>

            <div class="form-group">
                <label for="ProfileImage" class="control-label">Profile Image</label>
                <InputFile id="ProfileImage" class="form-control" OnChange="@HandleImageUpload" required />
                @if (string.IsNullOrEmpty(obj.ProfileImage))
                {
                    <p style="color: red;">Please upload a profile image.</p>
                }
                else
                {
                    <img src="@obj.ProfileImage" alt="Profile Image" hidden />
                    @if (imageUploadedSuccessfully)
                    {
                        <p style="color: green;">@imageName uploaded successfully. </p>
                    }
                }
            </div>

            <!-- Existing form elements -->
            <!-- File upload section -->
            <div class="form-group">
                <label for="MultiFilesUpload" class="control-label">Upload Files</label>
                <InputFile id="MultiFilesUpload" class="form-control" multiple OnChange="@HandleFileUpload" required />
                

                <!-- Display uploaded file names -->
                @if (obj.MultiFilesUpload != null && obj.MultiFilesUpload.Count > 0)
                {
                    <ul>
                        @foreach (var file in obj.MultiFilesUpload)
                        {
                            <li>@file.FileName</li>
                        }
                    </ul>
                }

                <!-- Progress bar -->
                @if (fileUploadProgress >= 0)
                {
                    <div class="progress">
                        <div class="progress-bar" role="progressbar" style="width: @fileUploadProgress%">@fileUploadProgress%</div>
                    </div>
                }

                <!-- Display success message for uploaded files -->
                @if (!string.IsNullOrEmpty(errorMessage) && fileUploadProgress == -1)
                {
                    <div class="alert alert-success" role="alert">
                        @errorMessage
                    </div>
                }
            </div>

            <div class="form-group">
                <label class="control-label">Gender</label>
                <div>
                    <MudRadioGroup @bind-Value="obj.Gender">
                        <MudRadio Value="true">Male</MudRadio>
                        <MudRadio Value="false">Female</MudRadio>
                    </MudRadioGroup>
                </div>
            </div>

            <div class="form-group" style="width:30%;">
            <label class="control-label">Age</label>
            <div>
                    <MudNumericField @bind-Value="obj.Age" Label="Standard" Variant="Variant.Text" Min="0" Max="100" />
           </div>
            </div>

            <div class="form-group">


            </div>
            <div class="form-group">             
             <MudTextField @bind-Value="obj.Address" Label="Address" Required="true" />

            </div>

            <div class="form-group">
                <label for="Country" class="control-label">Country</label>
                <select class="form-control" @bind="@selectedCountryId" @oninput="HandleCountryChange" required>
                    <option value="">Select a country</option>
                    @foreach (var country in countries)
                    {
                        <option value="@country.CountryId">@country.CountryName</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="State" class="control-label">State</label>
                <select class="form-control" @bind="@selectedStateId" @oninput="HandleStateChange" required>
                    <option value="">Select a state</option>
                    @foreach (var state in states)
                    {
                        <option value="@state.StateId">@state.StateName</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="City" class="control-label">City</label>
                <select class="form-control" @bind="@selectedCityId" required>
                    <option value="">Select a city</option>
                    @foreach (var city in cities)
                    {
                        <option value="@city.CityId">@city.CityName</option>
                    }
                </select>
            </div>
        @*     <div>
                <MudGrid Class="justify-space-between" Style="max-width: 400px;">
                    <MudItem xs="12">
                        <MudTextField Mask="@mask" Label="  Adhar Number"
                                      @bind-Value="text" Variant="@Variant.Outlined" Clearable />
                     </MudItem>
                     <MudItem xs="12">
                         Adhar Number : <b>@text</b>
                    </MudItem>
                </MudGrid>

                @code {
                    public string text { get; set; }

                    IMask mask = new BlockMask(delimiters: " ", new Block('a', 1, 3), new Block('0', 1, 4));
                }
            </div> *@
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <Input type="button" class="btn btn-primary" @onclick="@CreateNewUser" value="Save User" />
                        <Input type="button" class="btn btn-danger" @onclick="@Cancel" value="Cancel" />
                    </div>
                </div>
            </div>       
        </div>
    </div>


</form>

@code {
    User obj = new User();
    private string errorMessage;
    private string successMessage;
    private string imageName;
    private bool imageUploadedSuccessfully = false;
    private string emailErrorMessage;
    private List<Country> countries = new List<Country>();
    private List<State> states = new List<State>();
    private List<City> cities = new List<City>();
    private int selectedCountryId;
    private int selectedStateId;
    private int selectedCityId;
    private int fileUploadProgress = -1;
    private int newUserCount = 0;

    private MudInput<string> emailValidation;


    private List<UploadFileInfo> uploadedFiles = new List<UploadFileInfo>();

    protected override async Task OnInitializedAsync()
    {
        countries = await userService.GetCountries();
    }

    private async Task HandleCountryChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int countryId))
        {
            selectedStateId = 0;
            selectedCityId = 0;
            states = await userService.GetStatesByCountry(countryId);
            cities.Clear();
        }
    }

    private async Task HandleStateChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int stateId))
        {
            selectedCityId = 0;
            cities = await userService.GetCitiesByState(stateId);
        }
    }



    private async Task CreateNewUser()
    {
        if (string.IsNullOrWhiteSpace(obj.FirstName) ||
            string.IsNullOrWhiteSpace(obj.LastName) ||
            string.IsNullOrWhiteSpace(obj.Email) ||
            obj.ProfileImage == null ||
            string.IsNullOrWhiteSpace(obj.Address) ||
            selectedCityId == 0 ||
            selectedStateId == 0 ||
            selectedCountryId == 0)
        {
            errorMessage = "Please fill in all required fields.";
            return;
        }

        if (await userService.UserExistsByEmail(obj.Email))
        {
            errorMessage = "User with this email already exists.";
            return;
        }

        // Assign gender based on the selected radio button
        obj.Gender = obj.Gender; // Assume male as default
                           // You can modify this logic based on your radio button selection


        // Ensure age is entered
        if (obj.Age <= 0)
        {
            errorMessage = "Please enter a valid age.";
            return;
        }

        bool userAdded = await userService.AddUser(obj, selectedCountryId, selectedStateId, selectedCityId, uploadedFiles);
        if (userAdded)
        {
            // Set success message
            successMessage = "User added successfully.";

            // Set flag for user added successfully
            session.SetItemAsync("UserAddedSuccessfully", true);

            // Wait for file upload to complete before navigating away
            while (fileUploadProgress != -1)
            {
                await Task.Delay(100); // Adjust delay as needed
            }

            // Increment the count of newly added users
            newUserCount++;

            NavigationManager.NavigateTo("Users");
        }
    }



       

    private async Task CheckEmailAvailability()
    {
        if (!string.IsNullOrWhiteSpace(obj.Email))
        {
            if (await userService.UserExistsByEmail(obj.Email))
            {
                emailErrorMessage = "User with this email already exists.";
            }
            else
            {
                emailErrorMessage = null;
            }
        }
    }

    private bool IsValidEmail(string email)
    {
        string emailPattern = @"^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$";
        return Regex.IsMatch(email, emailPattern);
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("Users");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                obj.ProfileImage = Convert.ToBase64String(memoryStream.ToArray());
            }
            imageName = file.Name;
            imageUploadedSuccessfully = true;
        }
    }
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();

        foreach (var file in files)
        {
            if (file.ContentType.StartsWith("text/"))
            {
                // Set error message for text file upload
                errorMessage = "Text files are not allowed for upload.";
                return;
            }

            if (file.Size <= 2 * 1024 * 1024) // Check if file size is less than or equal to 2MB
            {
                // Check if the file with the same name already exists in the uploadedFiles list
                if (uploadedFiles.Any(f => f.FileName == file.Name))
                {
                    errorMessage = "File already uploaded.";
                    return;
                }

                using (var memoryStream = new MemoryStream())
                {
                    var buffer = new byte[8192];
                    using (var stream = file.OpenReadStream(maxAllowedSize: long.MaxValue))
                    {
                        var totalRead = 0;
                        var read = 0;
                        while ((read = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                        {
                            await memoryStream.WriteAsync(buffer, 0, read);
                            totalRead += read;
                            fileUploadProgress = (int)((float)totalRead / file.Size * 100);
                            StateHasChanged();
                        }
                    }
                    uploadedFiles.Add(new UploadFileInfo
                        {
                            FileName = file.Name,
                            Files = memoryStream.ToArray(),
                            ContentType = file.ContentType,
                            Base64File = Convert.ToBase64String(memoryStream.ToArray())
                        });
                }

                // Reset progress after upload completes
                fileUploadProgress = -1;

                // Set success message
                //errorMessage = "File uploaded successfully.";
            }
            else
            {
                // Set error message for file size exceeding 2MB
                errorMessage = "File size should be less than or equal to 2MB.";
                return;
            }
        }
    }



}
