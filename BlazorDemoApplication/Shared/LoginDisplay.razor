@* <AuthorizeView>
    <Authorized>
        <a href="/Users">Hello, @authenticationState.User.Identity?.Name!</a>

        <form method="post" action="/LogOut">
            <button type="submit" class="nav-link btn btn-link">Log out</button>
        </form>
    </Authorized>

    <NotAuthorized>
        <a href="/Register">Register</a>
        <a href="/">Log in</a>
    </NotAuthorized>
</AuthorizeView>

<CascadingAuthenticationState>
    @if (authenticationState != null && authenticationState.User.Identity != null && authenticationState.User.Identity.IsAuthenticated)
    {
        <a href="/Users">Hello, @authenticationState.User.Identity.Name!</a>
        <form method="post" action="/Logout">
            <button type="submit" class="nav-link btn btn-link">Log out</button>
        </form>
    }
    else
    {
        <a href="/Register">Register</a>
        <a href="/">Log in</a>
    }
</CascadingAuthenticationState>

@code {
    private AuthenticationState authenticationState;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }
}
 *@


@* <AuthorizeView>
    <Authorized>
        <!-- User-specific content -->
        <p>Welcome, @context.User.Identity?.Name!</p>
        <button class="btn btn-primary" @onclick="Logout">Log out</button>
    </Authorized>
    <NotAuthorized>
        <p>Please log in to view this content.</p>
    </NotAuthorized>
</AuthorizeView> *@
